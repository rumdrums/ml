##########################
###### numpy
##########################

### get columns with all zeros:
def get_zero_columns(x):
  return [ i for i in range(x.shape[1]) if np.count_nonzero(x[:,i]) == 0 ]


def count_zeros(x):
  return [ np.count_nonzero(x[:,i]) for i in range(x.shape[1]) ]



##########################
###### pandas
##########################

def drop_col_n(df, col_n_to_drop):
  col_dict = {x: col for x, col in enumerate(df.columns)}
  return df.drop(col_dict[col_n_to_drop], 1)


def count_zeros(df):
  return (df == 0).sum(axis=0)


def drop_columns_below_nonzero_thresh(x, thresh):
  i = 0
  n = x.shape[1]
  while i < n:
    if np.count_nonzero(x.ix[:,i]) < thresh:
      x = drop_col_n(x, i)
      n = x.shape[1]
      continue
    i += 1
  return x

# https://stackoverflow.com/questions/17778394/list-highest-correlation-pairs-from-a-large-correlation-matrix-in-pandas
### instead of get_redundant_pairs(df),
### you can use "cor.loc[:,:] = np.tril(cor.values, k=-1)"
### and then "cor = cor[cor>0]"


def get_redundant_pairs(df):
    '''Get diagonal and lower triangular pairs of correlation matrix'''
    pairs_to_drop = set()
    cols = df.columns
    for i in range(0, df.shape[1]):
        for j in range(0, i+1):
            pairs_to_drop.add((cols[i], cols[j]))
    return pairs_to_drop


def get_top_abs_correlations(df, n=5):
    au_corr = df.corr().abs().unstack()
    labels_to_drop = get_redundant_pairs(df)
    au_corr = au_corr.drop(labels=labels_to_drop).sort_values(ascending=False)
    return au_corr[0:n]


def del_corrs(dataset, threshold):
    col_corr = set() # Set of all the names of deleted columns
    corr_matrix = dataset.corr()
    for i in range(len(corr_matrix.columns)):
        for j in range(i):
            if corr_matrix.iloc[i, j] >= threshold:
                colname = corr_matrix.columns[i] # getting the name of column
                col_corr.add(colname)
                if colname in dataset.columns:
                    del dataset[colname] # deleting the column from the dataset
    print(dataset)

